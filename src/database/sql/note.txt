import { PoolConnection } from './connection';

export class DbManager {
    private conn: any;

    constructor(conn?: PoolConnection) {
        if (conn) this.setPoolConnection(conn);
    }

    public setPoolConnection(conn: PoolConnection): DbManager {
        this.conn = conn.getPool();
        return this;
    }

    public getPoolConnection(): any {
        return this.conn;
    }

    public async execute(query: string, params?: any): Promise<any> {
        let values: any = params;
        let sql: string = query;

        if (params && params.hasOwnProperty('identifier')) {
            sql = this.queryFormat(query, params.identifier);
            values = params.hasOwnProperty('values') ? params.values : null;
        }

        return new Promise((resolve, reject) => {
            this.conn.query(sql, values, (err: Error, results: any) => {
                if (err) return reject(err);
                else return resolve(results);
            });
        });
    }

    public queryFormat(query: string, values: any) {
        if (!values) return query;
        return query.replace(/\{(\w+)}/g, function (txt: string, key: string) {
            if (values.hasOwnProperty(key)) {
                return values[key];
            }
            return txt;
        }.bind(this));
    };

    public async insert(tableName: string, params: any): Promise<any> {
        return this.execute(`INSERT INTO ${tableName} SET ?`, params);
    }

    public async update(query: string, params?: any): Promise<any> {
        return this.execute(query, params);
    }

    public async delete(query: string, params?: any): Promise<any> {
        return this.execute(query, params);
    }

    public async findAll(query: string): Promise<any[]> {
        return this.execute(query, null);
    }

    public async find(query: string, params: any): Promise<any> {
        return this.execute(query, params);
    }

    public async findOne(query: string, params?: any): Promise<any> {
        return new Promise((resolve, reject) => {
            this.execute(query, params).then((rows: any[]) => {
                return (rows.length > 0) ? resolve(rows[0]) : resolve(null);
            }).catch(reject);
        });
    }

    public async call(procedureName: string, params?: any[]): Promise<any> {
        const opt: string[] = (params || []).map(() => { return '?'; });
        return this.execute(`CALL ${procedureName.replace(';', '')}(${opt.join(',')});`, params);
    }
}